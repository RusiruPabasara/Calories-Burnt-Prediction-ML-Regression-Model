# -*- coding: utf-8 -*-
"""Calories Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EThg4S6UGuXI6IMCd0hAYbjeRvpIANTd

# **Calories Burnt Prediction Regression Model**

Rusiru Pabasara

*   **Objective**: The primary goal of the model is to accurately predict the calorie expenditure (calories burnt) by individuals during physical activities
*   **Model Type** : The model is a regression model, specifically designed for continuous target variables, such as calorie counts.
*   **Features**: The model utilizes various input features (independent variables) such as gender, age, height, weight, duration of exercise, heart rate, and body temperature to make predictions.
*   **Development**: The model is developed using Python programming language within a Google colad notebook environment. Libraries such as pandas, scikit-learn, and XGBoost are likely used for data manipulation, model building, and evaluation.
*   **Training and Evaluation**: The model is trained on a dataset that contains historical records of individuals' characteristics and corresponding calorie expenditures. Evaluation metrics such as Mean Absolute Error (mae) and R-squared value are likely used to assess the model's performance.
*   **Interpretation**: The model's predictions can provide valuable insights into the factors influencing calorie expenditure during physical activities. It can help individuals and professionals in fields such as fitness, healthcare, and sports performance to better understand and optimize their exercise routines.
"""

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""Importing the Dependencies"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
from sklearn.metrics import r2_score

"""Data Importing & Data Pre-Processing"""

# loading th data from CSV file to pandas Dataframe
calories = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/calories.csv')

# print first 5 rows of the dataframe
calories.head()

exercise = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/exercise.csv')

exercise.head()

#Combining the calorie and exercise dataframes
df = pd.concat([exercise, calories['Calories']],axis=1)

df.head()

# check the numbers of rows and columns in df dataframe
df.shape

# checking some important information about this dataframe
df.info()

# checking missing values
df.isnull().sum()

"""There is no missing values in this dataset. In the data preprocrssing part we concatonate the two dataframe into one dataframe.Now let's go to the data Analysis part.

Data Analysis
"""

# get statistical measurment description about the dataframe
df.describe()

"""Data Visualization"""

sns.set()

#plot the gender variable (categorical)
plt.figure(figsize=(5,5))
sns.countplot(df['Gender'])

""" We can see that male and female count is approxiamtely equal in above count plot. So the distribution of gender is good in our dataset."""

#finding the distribution of age variable(quantitative)
plt.figure(figsize=(5,5))
sns.displot(df['Age'],kde=True)

#finding the distribution of height variable(quantitative)
plt.figure(figsize=(5,5))
sns.displot(df['Height'],kde=True)

"""Height distribution exhibits normality."""

#finding the distribution of weight variable(quantitative)
plt.figure(figsize=(5,5))
sns.histplot(df['Weight'],kde=True)

#finding the distribution of duration variable(quantitative)
plt.figure(figsize=(5,5))
sns.displot(df['Duration'],kde=True)

#finding the distribution of heart rate variable(quantitative)
plt.figure(figsize=(5,5))
sns.displot(df['Heart_Rate'],kde=True)

#finding the distribution of body temperature variable(quantitative)
plt.figure(figsize=(5,5))
sns.displot(df['Body_Temp'],kde=True)

#finding the distribution of calories variable(quantitative)
plt.figure(figsize=(5,5))
sns.displot(df['Calories'],kde=True)

"""Find the correlations of variables

1. Positive Correlation
2. Negative Correlation
"""

# Drop the 'gender' column
df_without_gender = df.drop(columns=['Gender'],axis=1)
correlation = df_without_gender.corr()

#plotting heatmap to understand correlation
plt.figure(figsize=(7,7))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

"""1. duration, heart rate, body tempureature positively correlated with calories,when they increaese the caloreies are also increases.
2. calories and weight is negatively correlated with age variable.

As 'Duration' and 'Calories' have a correlation coefficient of 1, it indicates a perfect linear relationship, making 'Duration' unnecessary for estimating the use of calories.

Feature Encoding

Text data (e.g., gender) is converted into numerical values for modeling purposes.
"""

df.replace({"Gender": {'male': 0, 'female': 1}}, inplace=True)

df.head()

"""Seperating features and Targets"""

X = df.drop(columns=['User_ID','Calories'],axis=1)
Y = df['Calories']

print(X) #features

print(Y) #target

"""Data Splitting

The dataset is split into training and testing sets using the train_test_split function from scikit-learn.
"""

X_train ,X_test ,Y_train ,Y_test = train_test_split(X, Y, test_size=0.1, random_state=2) #10% test data and 90% train data

print(X.shape,X_train.shape,X_test.shape)

"""Model Training & Evaluation

An XGBoost regression model is trained on the training data and evaluated using Mean Absolute Error (MAE) and R-squared value metrics.

XG Boost Regressor
"""

#loading the ML model
model = XGBRegressor()

#This line of code trains your ML model using the training data
model.fit(X_train,Y_train)

"""Prediction the test data"""

test_data_prediction = model.predict(X_test)

print(test_data_prediction)

"""Mean Absolute error"""

mae = metrics.mean_absolute_error(Y_test ,test_data_prediction) # y_test is original values and test_data_prediction is predict values

print("Mean absolute error = ", mae) # mae should be low value

# Calculate R-squared value
r_squared = r2_score(Y_test, test_data_prediction)

print("R squred value = ",r_squared) # R squared value measures goodness of fit in the model. It should be greater than 85% for a good model fit.

"""R-squared value of 99.89% suggests that the model is performing exceptionally well in explaining and predicting the calories burn based on the provided features.

Model Testing & Evaluation

The trained model is further evaluated using the testing data to ensure generalizability and robustness.
"""

# loading the model
model = XGBRegressor()

# training the model with X_test and Y_test
model.fit(X_test, Y_test)

"""Prediction the train data"""

test_data_prediction = model.predict(X_test)

print(test_data_prediction)

"""Mean Absolute error"""

mae = metrics.mean_absolute_error(Y_test ,test_data_prediction) # y_test is original values and test dataprediction is predict values

print("Mean absolute error = ", mae) # mae should be low value

# Calculate R-squared value
r_squared = r2_score(Y_test, test_data_prediction)

print("R squred value = ",r_squared)

"""R-squared value of 99.99% suggests that the model is performing exceptionally well in explaining and predicting the calories burn based on the provided features"""

import matplotlib.pyplot as plt

# Plotting original data vs predicted data
plt.figure(figsize=(6, 6))
plt.scatter(Y_test, test_data_prediction, color='blue', label='Predicted Data')
plt.plot([min(Y_test), max(Y_test)], [min(Y_test), max(Y_test)], color='red', linestyle='--', label='Original Data')
plt.title('Original Data vs Predicted Data')
plt.xlabel('Original Data')
plt.ylabel('Predicted Data')
plt.legend()
plt.show()

"""Therefore according to the plot and the R squared value we can consider this trained model is accurate."""